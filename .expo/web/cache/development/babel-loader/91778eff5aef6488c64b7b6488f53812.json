{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _playMode, _soundMode;\n\nimport { MUTE_MODE, PAUSE_MODE, PLAY_MODE, UNMUTE_MODE } from \"./constants\";\nexport var PLAYER_FUNCTIONS = {\n  muteVideo: 'player.mute(); true;',\n  unMuteVideo: 'player.unMute(); true;',\n  playVideo: 'player.playVideo(); true;',\n  pauseVideo: 'player.pauseVideo(); true;',\n  durationScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\\ntrue;\\n\",\n  currentTimeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\\ntrue;\\n\",\n  isMutedScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\\ntrue;\\n\",\n  getVolumeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\\ntrue;\\n\",\n  getPlaybackRateScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\\ntrue;\\n\",\n  getAvailablePlaybackRatesScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\\ntrue;\\n\",\n  setVolume: function setVolume(volume) {\n    return \"player.setVolume(\" + volume + \"); true;\";\n  },\n  seekToScript: function seekToScript(seconds, allowSeekAhead) {\n    return \"player.seekTo(\" + seconds + \", \" + allowSeekAhead + \"); true;\";\n  },\n  setPlaybackRate: function setPlaybackRate(playbackRate) {\n    return \"player.setPlaybackRate(\" + playbackRate + \"); true;\";\n  },\n  loadPlaylist: function loadPlaylist(playList, startIndex, play) {\n    var index = startIndex || 0;\n    var playlistJson = JSON.stringify(playList);\n    var func = play ? 'loadPlaylist' : 'cuePlaylist';\n    return \"player.\" + func + \"({playlist: \" + playlistJson + \", index: \" + index + \"); true;\";\n  }\n};\nexport var playMode = (_playMode = {}, _defineProperty(_playMode, PLAY_MODE, PLAYER_FUNCTIONS.playVideo), _defineProperty(_playMode, PAUSE_MODE, PLAYER_FUNCTIONS.pauseVideo), _playMode);\nexport var soundMode = (_soundMode = {}, _defineProperty(_soundMode, MUTE_MODE, PLAYER_FUNCTIONS.muteVideo), _defineProperty(_soundMode, UNMUTE_MODE, PLAYER_FUNCTIONS.unMuteVideo), _soundMode);\nexport var MAIN_SCRIPT = function MAIN_SCRIPT(videoId, playList, initialPlayerParams, allowWebViewZoom, contentScale) {\n  var end = initialPlayerParams.end,\n      rel = initialPlayerParams.rel,\n      color = initialPlayerParams.color,\n      start = initialPlayerParams.start,\n      playerLang = initialPlayerParams.playerLang,\n      _initialPlayerParams$ = initialPlayerParams.loop,\n      loop = _initialPlayerParams$ === void 0 ? false : _initialPlayerParams$,\n      cc_lang_pref = initialPlayerParams.cc_lang_pref,\n      iv_load_policy = initialPlayerParams.iv_load_policy,\n      modestbranding = initialPlayerParams.modestbranding,\n      _initialPlayerParams$2 = initialPlayerParams.controls,\n      controls = _initialPlayerParams$2 === void 0 ? true : _initialPlayerParams$2,\n      showClosedCaptions = initialPlayerParams.showClosedCaptions,\n      _initialPlayerParams$3 = initialPlayerParams.preventFullScreen,\n      preventFullScreen = _initialPlayerParams$3 === void 0 ? false : _initialPlayerParams$3;\n  var rel_s = rel ? 1 : 0;\n  var loop_s = loop ? 1 : 0;\n  var videoId_s = videoId || '';\n  var controls_s = controls ? 1 : 0;\n  var cc_lang_pref_s = cc_lang_pref || '';\n  var modestbranding_s = modestbranding ? 1 : 0;\n  var preventFullScreen_s = preventFullScreen ? 0 : 1;\n  var showClosedCaptions_s = showClosedCaptions ? 1 : 0;\n  var list = typeof playList === 'string' ? playList : '';\n  var listType = typeof playList === 'string' ? 'playlist' : '';\n  var contentScale_s = typeof contentScale === 'number' ? contentScale : 1.0;\n  var scale = \"initial-scale=\" + contentScale_s;\n\n  if (allowWebViewZoom) {\n    scale += \", maximum-scale=\" + contentScale_s;\n  }\n\n  return \"\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, \" + scale + \"\\\"\\n    >\\n    <style>\\n      body {\\n        margin: 0;\\n      }\\n      .container {\\n        position: relative;\\n        width: 100%;\\n        height: 0;\\n        padding-bottom: 56.25%;\\n      }\\n      .video {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"video\\\" id=\\\"player\\\" />\\n    </div>\\n\\n    <script>\\n      var tag = document.createElement('script');\\n\\n      tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n      var firstScriptTag = document.getElementsByTagName('script')[0];\\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\\n\\n      var player;\\n      function onYouTubeIframeAPIReady() {\\n        player = new YT.Player('player', {\\n          width: '1000',\\n          height: '1000',\\n          videoId: '\" + videoId_s + \"',\\n          playerVars: {\\n            end: \" + end + \",\\n            rel: \" + rel_s + \",\\n            playsinline: 1,\\n            loop: \" + loop_s + \",\\n            color: \" + color + \",\\n            start: \" + start + \",\\n            list: '\" + list + \"',\\n            hl: \" + playerLang + \",\\n            listType: '\" + listType + \"',\\n            controls: \" + controls_s + \",\\n            fs: \" + preventFullScreen_s + \",\\n            cc_lang_pref: '\" + cc_lang_pref_s + \"',\\n            iv_load_policy: \" + iv_load_policy + \",\\n            modestbranding: \" + modestbranding_s + \",\\n            cc_load_policy: \" + showClosedCaptions_s + \",\\n          },\\n          events: {\\n            'onReady': onPlayerReady,\\n            'onStateChange': onPlayerStateChange,\\n            'onError': onPlayerError,\\n            'onPlaybackQualityChange': onPlaybackQualityChange,\\n            'onPlaybackRateChange': onPlaybackRateChange,\\n          }\\n        });\\n      }\\n\\n      function onPlayerError(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\\n      }\\n\\n      function onPlaybackRateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\\n      }\\n\\n      function onPlaybackQualityChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\\n      }\\n\\n      function onPlayerReady(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\\n      }\\n\\n      var done = false;\\n      function onPlayerStateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\\n      }\\n\\n      var isFullScreen = false;\\n      function onFullScreenChange() {\\n        isFullScreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'fullScreenChange', data: Boolean(isFullScreen)}));\\n      }\\n\\n      document.addEventListener('fullscreenchange', onFullScreenChange)\\n      document.addEventListener('mozfullscreenchange', onFullScreenChange)\\n      document.addEventListener('msfullscreenchange', onFullScreenChange)\\n      document.addEventListener('webkitfullscreenchange', onFullScreenChange)\\n    </script>\\n  </body>\\n</html>\\n\";\n};","map":{"version":3,"sources":["/home/gabriel/Documentos/1click/Mobil/node_modules/react-native-youtube-iframe/src/PlayerScripts.js"],"names":["MUTE_MODE","PAUSE_MODE","PLAY_MODE","UNMUTE_MODE","PLAYER_FUNCTIONS","muteVideo","unMuteVideo","playVideo","pauseVideo","durationScript","currentTimeScript","isMutedScript","getVolumeScript","getPlaybackRateScript","getAvailablePlaybackRatesScript","setVolume","volume","seekToScript","seconds","allowSeekAhead","setPlaybackRate","playbackRate","loadPlaylist","playList","startIndex","play","index","playlistJson","JSON","stringify","func","playMode","soundMode","MAIN_SCRIPT","videoId","initialPlayerParams","allowWebViewZoom","contentScale","end","rel","color","start","playerLang","loop","cc_lang_pref","iv_load_policy","modestbranding","controls","showClosedCaptions","preventFullScreen","rel_s","loop_s","videoId_s","controls_s","cc_lang_pref_s","modestbranding_s","preventFullScreen_s","showClosedCaptions_s","list","listType","contentScale_s","scale"],"mappings":"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","sourcesContent":["import {MUTE_MODE, PAUSE_MODE, PLAY_MODE, UNMUTE_MODE} from './constants';\n\nexport const PLAYER_FUNCTIONS = {\n  muteVideo: 'player.mute(); true;',\n  unMuteVideo: 'player.unMute(); true;',\n  playVideo: 'player.playVideo(); true;',\n  pauseVideo: 'player.pauseVideo(); true;',\n  durationScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\ntrue;\n`,\n  currentTimeScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\ntrue;\n`,\n  isMutedScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\ntrue;\n`,\n  getVolumeScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\ntrue;\n`,\n  getPlaybackRateScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\ntrue;\n`,\n  getAvailablePlaybackRatesScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\ntrue;\n`,\n\n  setVolume: volume => {\n    return `player.setVolume(${volume}); true;`;\n  },\n\n  seekToScript: (seconds, allowSeekAhead) => {\n    return `player.seekTo(${seconds}, ${allowSeekAhead}); true;`;\n  },\n\n  setPlaybackRate: playbackRate => {\n    return `player.setPlaybackRate(${playbackRate}); true;`;\n  },\n\n  loadPlaylist: (playList, startIndex, play) => {\n    const index = startIndex || 0;\n    const playlistJson = JSON.stringify(playList);\n    const func = play ? 'loadPlaylist' : 'cuePlaylist';\n\n    return `player.${func}({playlist: ${playlistJson}, index: ${index}); true;`;\n  },\n};\n\nexport const playMode = {\n  [PLAY_MODE]: PLAYER_FUNCTIONS.playVideo,\n  [PAUSE_MODE]: PLAYER_FUNCTIONS.pauseVideo,\n};\n\nexport const soundMode = {\n  [MUTE_MODE]: PLAYER_FUNCTIONS.muteVideo,\n  [UNMUTE_MODE]: PLAYER_FUNCTIONS.unMuteVideo,\n};\n\nexport const MAIN_SCRIPT = (\n  videoId,\n  playList,\n  initialPlayerParams,\n  allowWebViewZoom,\n  contentScale,\n) => {\n  const {\n    end,\n    rel,\n    color,\n    start,\n    playerLang,\n    loop = false,\n    cc_lang_pref,\n    iv_load_policy,\n    modestbranding,\n    controls = true,\n    showClosedCaptions,\n    preventFullScreen = false,\n  } = initialPlayerParams;\n\n  // _s postfix to refer to \"safe\"\n  const rel_s = rel ? 1 : 0;\n  const loop_s = loop ? 1 : 0;\n  const videoId_s = videoId || '';\n  const controls_s = controls ? 1 : 0;\n  const cc_lang_pref_s = cc_lang_pref || '';\n  const modestbranding_s = modestbranding ? 1 : 0;\n  const preventFullScreen_s = preventFullScreen ? 0 : 1;\n  const showClosedCaptions_s = showClosedCaptions ? 1 : 0;\n  const list = typeof playList === 'string' ? playList : '';\n  const listType = typeof playList === 'string' ? 'playlist' : '';\n  const contentScale_s = typeof contentScale === 'number' ? contentScale : 1.0;\n\n  // scale will either be \"initial-scale=1.0\"\n  let scale = `initial-scale=${contentScale_s}`;\n  if (allowWebViewZoom) {\n    // or \"initial-scale=0.8, maximum-scale=1.0\"\n    scale += `, maximum-scale=${contentScale_s}`;\n  }\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, ${scale}\"\n    >\n    <style>\n      body {\n        margin: 0;\n      }\n      .container {\n        position: relative;\n        width: 100%;\n        height: 0;\n        padding-bottom: 56.25%;\n      }\n      .video {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"video\" id=\"player\" />\n    </div>\n\n    <script>\n      var tag = document.createElement('script');\n\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n      var player;\n      function onYouTubeIframeAPIReady() {\n        player = new YT.Player('player', {\n          width: '1000',\n          height: '1000',\n          videoId: '${videoId_s}',\n          playerVars: {\n            end: ${end},\n            rel: ${rel_s},\n            playsinline: 1,\n            loop: ${loop_s},\n            color: ${color},\n            start: ${start},\n            list: '${list}',\n            hl: ${playerLang},\n            listType: '${listType}',\n            controls: ${controls_s},\n            fs: ${preventFullScreen_s},\n            cc_lang_pref: '${cc_lang_pref_s}',\n            iv_load_policy: ${iv_load_policy},\n            modestbranding: ${modestbranding_s},\n            cc_load_policy: ${showClosedCaptions_s},\n          },\n          events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange,\n            'onError': onPlayerError,\n            'onPlaybackQualityChange': onPlaybackQualityChange,\n            'onPlaybackRateChange': onPlaybackRateChange,\n          }\n        });\n      }\n\n      function onPlayerError(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\n      }\n\n      function onPlaybackRateChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\n      }\n\n      function onPlaybackQualityChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\n      }\n\n      function onPlayerReady(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\n      }\n\n      var done = false;\n      function onPlayerStateChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\n      }\n\n      var isFullScreen = false;\n      function onFullScreenChange() {\n        isFullScreen = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'fullScreenChange', data: Boolean(isFullScreen)}));\n      }\n\n      document.addEventListener('fullscreenchange', onFullScreenChange)\n      document.addEventListener('mozfullscreenchange', onFullScreenChange)\n      document.addEventListener('msfullscreenchange', onFullScreenChange)\n      document.addEventListener('webkitfullscreenchange', onFullScreenChange)\n    </script>\n  </body>\n</html>\n`;\n};\n"]},"metadata":{},"sourceType":"module"}