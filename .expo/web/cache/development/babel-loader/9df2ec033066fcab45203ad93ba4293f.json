{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/gabriel/Documentos/1click/Mobil/node_modules/react-native-youtube-iframe/src/YoutubeIframe.js\";\n\nimport React, { useRef, useState, useEffect, forwardRef, useCallback, useImperativeHandle } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport WebView from 'react-native-webview';\nimport { PLAYER_STATES, PLAYER_ERROR, CUSTOM_USER_AGENT } from \"./constants\";\nimport { EventEmitter } from 'events';\nimport { playMode, soundMode, MAIN_SCRIPT, PLAYER_FUNCTIONS } from \"./PlayerScripts\";\n\nvar YoutubeIframe = function YoutubeIframe(props, ref) {\n  var height = props.height,\n      width = props.width,\n      videoId = props.videoId,\n      playList = props.playList,\n      _props$play = props.play,\n      play = _props$play === void 0 ? false : _props$play,\n      _props$mute = props.mute,\n      mute = _props$mute === void 0 ? false : _props$mute,\n      _props$volume = props.volume,\n      volume = _props$volume === void 0 ? 100 : _props$volume,\n      webViewStyle = props.webViewStyle,\n      webViewProps = props.webViewProps,\n      _props$playbackRate = props.playbackRate,\n      playbackRate = _props$playbackRate === void 0 ? 1 : _props$playbackRate,\n      _props$contentScale = props.contentScale,\n      contentScale = _props$contentScale === void 0 ? 1.0 : _props$contentScale,\n      _props$onError = props.onError,\n      onError = _props$onError === void 0 ? function (_err) {} : _props$onError,\n      _props$onReady = props.onReady,\n      onReady = _props$onReady === void 0 ? function (_event) {} : _props$onReady,\n      _props$playListStartI = props.playListStartIndex,\n      playListStartIndex = _props$playListStartI === void 0 ? 0 : _props$playListStartI,\n      _props$initialPlayerP = props.initialPlayerParams,\n      initialPlayerParams = _props$initialPlayerP === void 0 ? {} : _props$initialPlayerP,\n      _props$allowWebViewZo = props.allowWebViewZoom,\n      allowWebViewZoom = _props$allowWebViewZo === void 0 ? false : _props$allowWebViewZo,\n      _props$forceAndroidAu = props.forceAndroidAutoplay,\n      forceAndroidAutoplay = _props$forceAndroidAu === void 0 ? false : _props$forceAndroidAu,\n      _props$onChangeState = props.onChangeState,\n      onChangeState = _props$onChangeState === void 0 ? function (_event) {} : _props$onChangeState,\n      _props$onFullScreenCh = props.onFullScreenChange,\n      onFullScreenChange = _props$onFullScreenCh === void 0 ? function (_status) {} : _props$onFullScreenCh,\n      _props$onPlaybackQual = props.onPlaybackQualityChange,\n      onPlaybackQualityChange = _props$onPlaybackQual === void 0 ? function (_quality) {} : _props$onPlaybackQual,\n      _props$onPlaybackRate = props.onPlaybackRateChange,\n      onPlaybackRateChange = _props$onPlaybackRate === void 0 ? function (_playbackRate) {} : _props$onPlaybackRate;\n  var webViewRef = useRef(null);\n  var eventEmitter = useRef(new EventEmitter());\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playerReady = _useState2[0],\n      setPlayerReady = _useState2[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getDuration: function getDuration() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.durationScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getDuration', resolve);\n        });\n      },\n      getCurrentTime: function getCurrentTime() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.currentTimeScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getCurrentTime', resolve);\n        });\n      },\n      isMuted: function isMuted() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.isMutedScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('isMuted', resolve);\n        });\n      },\n      getVolume: function getVolume() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getVolumeScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getVolume', resolve);\n        });\n      },\n      getPlaybackRate: function getPlaybackRate() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getPlaybackRateScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getPlaybackRate', resolve);\n        });\n      },\n      getAvailablePlaybackRates: function getAvailablePlaybackRates() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getAvailablePlaybackRatesScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getAvailablePlaybackRates', resolve);\n        });\n      },\n      seekTo: function seekTo(seconds, allowSeekAhead) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.seekToScript(seconds, allowSeekAhead));\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (!playerReady) {\n      return;\n    }\n\n    [playMode[play], soundMode[mute], PLAYER_FUNCTIONS.setVolume(volume), PLAYER_FUNCTIONS.setPlaybackRate(playbackRate)].forEach(webViewRef.current.injectJavaScript);\n  }, [play, playerReady, mute, volume, playbackRate]);\n  var onWebMessage = useCallback(function (event) {\n    var message = JSON.parse(event.nativeEvent.data);\n\n    try {\n      switch (message.eventType) {\n        case 'fullScreenChange':\n          onFullScreenChange(message.data);\n          break;\n\n        case 'playerStateChange':\n          onChangeState(PLAYER_STATES[message.data]);\n          break;\n\n        case 'playerReady':\n          onReady();\n          setPlayerReady(true);\n\n          if (Array.isArray(playList)) {\n            webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.loadPlaylist(playList, playListStartIndex, play));\n          }\n\n          break;\n\n        case 'playerQualityChange':\n          onPlaybackQualityChange(message.data);\n          break;\n\n        case 'playerError':\n          onError(PLAYER_ERROR[message.data]);\n          break;\n\n        case 'playbackRateChange':\n          onPlaybackRateChange(message.data);\n          break;\n\n        default:\n          eventEmitter.current.emit(message.eventType, message.data);\n          break;\n      }\n    } catch (error) {\n      console.warn(error);\n    }\n  }, [play, onReady, onError, playList, onChangeState, onFullScreenChange, playListStartIndex, onPlaybackRateChange, onPlaybackQualityChange]);\n  return React.createElement(View, {\n    style: {\n      height: height,\n      width: width\n    }\n  }, React.createElement(WebView, _extends({\n    ref: webViewRef,\n    originWhitelist: ['*'],\n    onMessage: onWebMessage,\n    allowsInlineMediaPlayback: true,\n    style: [styles.webView, webViewStyle],\n    mediaPlaybackRequiresUserAction: false,\n    allowsFullscreenVideo: !(initialPlayerParams != null && initialPlayerParams.preventFullScreen),\n    source: {\n      html: MAIN_SCRIPT(videoId, playList, initialPlayerParams, allowWebViewZoom, contentScale)\n    },\n    userAgent: forceAndroidAutoplay ? Platform.select({\n      android: CUSTOM_USER_AGENT,\n      ios: ''\n    }) : '',\n    onShouldStartLoadWithRequest: function onShouldStartLoadWithRequest(request) {\n      return request.mainDocumentURL === 'about:blank';\n    },\n    bounces: false\n  }, webViewProps)));\n};\n\nvar styles = StyleSheet.create({\n  webView: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default forwardRef(YoutubeIframe);","map":{"version":3,"sources":["/home/gabriel/Documentos/1click/Mobil/node_modules/react-native-youtube-iframe/src/YoutubeIframe.js"],"names":["React","useRef","useState","useEffect","forwardRef","useCallback","useImperativeHandle","WebView","PLAYER_STATES","PLAYER_ERROR","CUSTOM_USER_AGENT","EventEmitter","playMode","soundMode","MAIN_SCRIPT","PLAYER_FUNCTIONS","YoutubeIframe","props","ref","height","width","videoId","playList","play","mute","volume","webViewStyle","webViewProps","playbackRate","contentScale","onError","_err","onReady","_event","playListStartIndex","initialPlayerParams","allowWebViewZoom","forceAndroidAutoplay","onChangeState","onFullScreenChange","_status","onPlaybackQualityChange","_quality","onPlaybackRateChange","_playbackRate","webViewRef","eventEmitter","playerReady","setPlayerReady","getDuration","current","injectJavaScript","durationScript","Promise","resolve","once","getCurrentTime","currentTimeScript","isMuted","isMutedScript","getVolume","getVolumeScript","getPlaybackRate","getPlaybackRateScript","getAvailablePlaybackRates","getAvailablePlaybackRatesScript","seekTo","seconds","allowSeekAhead","seekToScript","setVolume","setPlaybackRate","forEach","onWebMessage","event","message","JSON","parse","nativeEvent","data","eventType","Array","isArray","loadPlaylist","emit","error","console","warn","styles","webView","preventFullScreen","html","Platform","select","android","ios","request","mainDocumentURL","StyleSheet","create","backgroundColor"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  useState,\n  useEffect,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n} from 'react';\nimport {View, StyleSheet, Platform} from 'react-native';\nimport WebView from 'react-native-webview';\nimport {PLAYER_STATES, PLAYER_ERROR, CUSTOM_USER_AGENT} from './constants';\nimport {EventEmitter} from 'events';\nimport {\n  playMode,\n  soundMode,\n  MAIN_SCRIPT,\n  PLAYER_FUNCTIONS,\n} from './PlayerScripts';\n\nconst YoutubeIframe = (props, ref) => {\n  const {\n    height,\n    width,\n    videoId,\n    playList,\n    play = false,\n    mute = false,\n    volume = 100,\n    webViewStyle,\n    webViewProps,\n    playbackRate = 1,\n    contentScale = 1.0,\n    onError = _err => {},\n    onReady = _event => {},\n    playListStartIndex = 0,\n    initialPlayerParams = {},\n    allowWebViewZoom = false,\n    forceAndroidAutoplay = false,\n    onChangeState = _event => {},\n    onFullScreenChange = _status => {},\n    onPlaybackQualityChange = _quality => {},\n    onPlaybackRateChange = _playbackRate => {},\n  } = props;\n\n  const webViewRef = useRef(null);\n  const eventEmitter = useRef(new EventEmitter());\n  const [playerReady, setPlayerReady] = useState(false);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      getDuration: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.durationScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getDuration', resolve);\n        });\n      },\n      getCurrentTime: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.currentTimeScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getCurrentTime', resolve);\n        });\n      },\n      isMuted: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.isMutedScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('isMuted', resolve);\n        });\n      },\n      getVolume: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getVolumeScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getVolume', resolve);\n        });\n      },\n      getPlaybackRate: () => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.getPlaybackRateScript,\n        );\n        return new Promise(resolve => {\n          eventEmitter.current.once('getPlaybackRate', resolve);\n        });\n      },\n      getAvailablePlaybackRates: () => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.getAvailablePlaybackRatesScript,\n        );\n        return new Promise(resolve => {\n          eventEmitter.current.once('getAvailablePlaybackRates', resolve);\n        });\n      },\n      seekTo: (seconds, allowSeekAhead) => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.seekToScript(seconds, allowSeekAhead),\n        );\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (!playerReady) {\n      return;\n    }\n\n    [\n      playMode[play],\n      soundMode[mute],\n      PLAYER_FUNCTIONS.setVolume(volume),\n      PLAYER_FUNCTIONS.setPlaybackRate(playbackRate),\n    ].forEach(webViewRef.current.injectJavaScript);\n  }, [play, playerReady, mute, volume, playbackRate]);\n\n  const onWebMessage = useCallback(\n    event => {\n      const message = JSON.parse(event.nativeEvent.data);\n      try {\n        switch (message.eventType) {\n          case 'fullScreenChange':\n            onFullScreenChange(message.data);\n            break;\n          case 'playerStateChange':\n            onChangeState(PLAYER_STATES[message.data]);\n            break;\n          case 'playerReady':\n            onReady();\n            setPlayerReady(true);\n            if (Array.isArray(playList)) {\n              webViewRef.current.injectJavaScript(\n                PLAYER_FUNCTIONS.loadPlaylist(\n                  playList,\n                  playListStartIndex,\n                  play,\n                ),\n              );\n            }\n            break;\n          case 'playerQualityChange':\n            onPlaybackQualityChange(message.data);\n            break;\n          case 'playerError':\n            onError(PLAYER_ERROR[message.data]);\n            break;\n          case 'playbackRateChange':\n            onPlaybackRateChange(message.data);\n            break;\n          default:\n            eventEmitter.current.emit(message.eventType, message.data);\n            break;\n        }\n      } catch (error) {\n        console.warn(error);\n      }\n    },\n    [\n      play,\n      onReady,\n      onError,\n      playList,\n      onChangeState,\n      onFullScreenChange,\n      playListStartIndex,\n      onPlaybackRateChange,\n      onPlaybackQualityChange,\n    ],\n  );\n\n  return (\n    <View style={{height, width}}>\n      <WebView\n        ref={webViewRef}\n        originWhitelist={['*']}\n        onMessage={onWebMessage}\n        allowsInlineMediaPlayback\n        style={[styles.webView, webViewStyle]}\n        mediaPlaybackRequiresUserAction={false}\n        allowsFullscreenVideo={!initialPlayerParams?.preventFullScreen}\n        source={{\n          html: MAIN_SCRIPT(\n            videoId,\n            playList,\n            initialPlayerParams,\n            allowWebViewZoom,\n            contentScale,\n          ),\n        }}\n        userAgent={\n          forceAndroidAutoplay\n            ? Platform.select({android: CUSTOM_USER_AGENT, ios: ''})\n            : ''\n        }\n        onShouldStartLoadWithRequest={request => {\n          return request.mainDocumentURL === 'about:blank';\n        }}\n        bounces={false}\n        {...webViewProps}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  webView: {backgroundColor: 'transparent'},\n});\n\nexport default forwardRef(YoutubeIframe);\n"]},"metadata":{},"sourceType":"module"}